import React, { useState } from 'react';
import {
  Box,
  Card,
  CardHeader,
  CardContent,
  Grid,
  Button,
  Chip,
  Typography,
  IconButton,
  Collapse,
  Tooltip,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  ListItemSecondaryAction,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
} from '@mui/material';
import {
  Map as MapIcon,
  TextFields as TextFieldsIcon,
  BarChart as BarChartIcon,
  Update as UpdateIcon,
  AutoAwesome as AutoAwesomeIcon,
  DataObject as DataObjectIcon,
  Image as ImageIcon,
  Assessment as AssessmentIcon,
  Science as ScienceIcon,
  Security as SecurityIcon,
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon,
  Add as AddIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n  BookmarkBorder as BookmarkBorderIcon,\n} from '@mui/icons-material';\nimport type { FilterOptions } from '../../utils/searchUtils';\n\nexport interface FilterPreset {\n  id: string;\n  name: string;\n  description?: string;\n  icon: React.ReactNode;\n  filters: FilterOptions;\n  isCustom?: boolean;\n  tags?: string[];\n}\n\nexport interface FilterPresetsProps {\n  onApplyPreset: (filters: FilterOptions) => void;\n  currentFilters?: FilterOptions;\n  customPresets?: FilterPreset[];\n  onSaveCustomPreset?: (preset: Omit<FilterPreset, 'id' | 'isCustom'>) => void;\n  onDeleteCustomPreset?: (presetId: string) => void;\n  expanded?: boolean;\n  onExpandedChange?: (expanded: boolean) => void;\n}\n\nconst defaultPresets: FilterPreset[] = [\n  {\n    id: 'gis-tools',\n    name: 'GIS Tools',\n    description: 'Geographic Information System and mapping tools',\n    icon: <MapIcon />,\n    tags: ['spatial', 'mapping', 'geographic'],\n    filters: {\n      categories: ['geospatial'],\n      tags: ['gis', 'mapping', 'spatial'],\n      complexity: null,\n      lastUpdated: null,\n      inputTypes: [],\n      outputTypes: [],\n      status: null,\n    }\n  },\n  {\n    id: 'text-analysis',\n    name: 'Text Analysis',\n    description: 'Natural language processing and text analysis tools',\n    icon: <TextFieldsIcon />,\n    tags: ['nlp', 'text', 'language'],\n    filters: {\n      categories: ['text'],\n      tags: ['nlp', 'analysis', 'processing'],\n      complexity: null,\n      lastUpdated: null,\n      inputTypes: ['text', 'string'],\n      outputTypes: [],\n      status: null,\n    }\n  },\n  {\n    id: 'data-visualization',\n    name: 'Data Visualization',\n    description: 'Charts, graphs, and visual data representation tools',\n    icon: <BarChartIcon />,\n    tags: ['visualization', 'charts', 'graphs'],\n    filters: {\n      categories: ['visualization'],\n      tags: ['chart', 'graph', 'plot'],\n      complexity: null,\n      lastUpdated: null,\n      inputTypes: [],\n      outputTypes: ['chart', 'graph', 'image'],\n      status: null,\n    }\n  },\n  {\n    id: 'recently-updated',\n    name: 'Recently Updated',\n    description: 'Tools updated in the past month',\n    icon: <UpdateIcon />,\n    tags: ['recent', 'updated', 'new'],\n    filters: {\n      categories: [],\n      tags: [],\n      complexity: null,\n      lastUpdated: 'month',\n      inputTypes: [],\n      outputTypes: [],\n      status: null,\n    }\n  },\n  {\n    id: 'beginner-friendly',\n    name: 'Beginner Friendly',\n    description: 'Easy-to-use tools perfect for beginners',\n    icon: <AutoAwesomeIcon />,\n    tags: ['beginner', 'easy', 'simple'],\n    filters: {\n      categories: [],\n      tags: [],\n      complexity: 'beginner',\n      lastUpdated: null,\n      inputTypes: [],\n      outputTypes: [],\n      status: 'stable',\n    }\n  },\n  {\n    id: 'data-processing',\n    name: 'Data Processing',\n    description: 'Tools for data transformation and processing',\n    icon: <DataObjectIcon />,\n    tags: ['data', 'processing', 'transform'],\n    filters: {\n      categories: ['data'],\n      tags: ['processing', 'transformation', 'etl'],\n      complexity: null,\n      lastUpdated: null,\n      inputTypes: ['json', 'csv', 'xml'],\n      outputTypes: [],\n      status: null,\n    }\n  },\n  {\n    id: 'image-tools',\n    name: 'Image Tools',\n    description: 'Image processing and computer vision tools',\n    icon: <ImageIcon />,\n    tags: ['image', 'vision', 'processing'],\n    filters: {\n      categories: ['image'],\n      tags: ['image', 'vision', 'processing'],\n      complexity: null,\n      lastUpdated: null,\n      inputTypes: ['image', 'png', 'jpg'],\n      outputTypes: ['image'],\n      status: null,\n    }\n  },\n  {\n    id: 'analytics',\n    name: 'Analytics',\n    description: 'Statistical analysis and data science tools',\n    icon: <AssessmentIcon />,\n    tags: ['analytics', 'statistics', 'analysis'],\n    filters: {\n      categories: ['analytics'],\n      tags: ['analysis', 'statistics', 'metrics'],\n      complexity: null,\n      lastUpdated: null,\n      inputTypes: [],\n      outputTypes: [],\n      status: null,\n    }\n  },\n  {\n    id: 'machine-learning',\n    name: 'Machine Learning',\n    description: 'AI and machine learning tools',\n    icon: <ScienceIcon />,\n    tags: ['ai', 'ml', 'machine learning'],\n    filters: {\n      categories: ['ai', 'ml'],\n      tags: ['machine-learning', 'ai', 'prediction'],\n      complexity: null,\n      lastUpdated: null,\n      inputTypes: [],\n      outputTypes: [],\n      status: null,\n    }\n  },\n  {\n    id: 'security',\n    name: 'Security Tools',\n    description: 'Cybersecurity and data protection tools',\n    icon: <SecurityIcon />,\n    tags: ['security', 'encryption', 'protection'],\n    filters: {\n      categories: ['security'],\n      tags: ['security', 'encryption', 'validation'],\n      complexity: null,\n      lastUpdated: null,\n      inputTypes: [],\n      outputTypes: [],\n      status: null,\n    }\n  },\n];\n\nexport const FilterPresets: React.FC<FilterPresetsProps> = ({\n  onApplyPreset,\n  currentFilters,\n  customPresets = [],\n  onSaveCustomPreset,\n  onDeleteCustomPreset,\n  expanded = false,\n  onExpandedChange,\n}) => {\n  const [internalExpanded, setInternalExpanded] = useState(expanded);\n  const [saveDialogOpen, setSaveDialogOpen] = useState(false);\n  const [presetName, setPresetName] = useState('');\n  const [presetDescription, setPresetDescription] = useState('');\n  \n  const isExpanded = onExpandedChange ? expanded : internalExpanded;\n  const setExpanded = onExpandedChange || setInternalExpanded;\n\n  const hasActiveFilters = currentFilters && (\n    currentFilters.categories.length > 0 ||\n    currentFilters.tags.length > 0 ||\n    currentFilters.complexity ||\n    currentFilters.lastUpdated ||\n    currentFilters.inputTypes.length > 0 ||\n    currentFilters.outputTypes.length > 0 ||\n    currentFilters.status\n  );\n\n  const handlePresetClick = (preset: FilterPreset) => {\n    onApplyPreset(preset.filters);\n  };\n\n  const handleSaveCurrentFilters = () => {\n    setSaveDialogOpen(true);\n  };\n\n  const handleSavePreset = () => {\n    if (presetName.trim() && currentFilters && onSaveCustomPreset) {\n      onSaveCustomPreset({\n        name: presetName.trim(),\n        description: presetDescription.trim() || undefined,\n        icon: <BookmarkBorderIcon />,\n        filters: currentFilters,\n      });\n      setPresetName('');\n      setPresetDescription('');\n      setSaveDialogOpen(false);\n    }\n  };\n\n  const renderPresetButton = (preset: FilterPreset) => (\n    <Grid item xs={12} sm={6} md={4} key={preset.id}>\n      <Button\n        variant=\"outlined\"\n        startIcon={preset.icon}\n        onClick={() => handlePresetClick(preset)}\n        fullWidth\n        sx={{\n          justifyContent: 'flex-start',\n          p: 2,\n          height: 'auto',\n          flexDirection: 'column',\n          alignItems: 'flex-start',\n          textAlign: 'left',\n          position: 'relative',\n        }}\n      >\n        <Box sx={{ display: 'flex', alignItems: 'center', width: '100%', mb: 1 }}>\n          <Typography variant=\"subtitle2\" sx={{ fontWeight: 600 }}>\n            {preset.name}\n          </Typography>\n          {preset.isCustom && onDeleteCustomPreset && (\n            <IconButton\n              size=\"small\"\n              onClick={(e) => {\n                e.stopPropagation();\n                onDeleteCustomPreset(preset.id);\n              }}\n              sx={{ ml: 'auto', p: 0.5 }}\n            >\n              <DeleteIcon fontSize=\"small\" />\n            </IconButton>\n          )}\n        </Box>\n        {preset.description && (\n          <Typography \n            variant=\"caption\" \n            color=\"text.secondary\" \n            sx={{ mb: 1, lineHeight: 1.3 }}\n          >\n            {preset.description}\n          </Typography>\n        )}\n        {preset.tags && (\n          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>\n            {preset.tags.slice(0, 3).map(tag => (\n              <Chip\n                key={tag}\n                label={tag}\n                size=\"small\"\n                variant=\"outlined\"\n                sx={{ \n                  height: 20, \n                  fontSize: '0.7rem',\n                  '& .MuiChip-label': { px: 1 }\n                }}\n              />\n            ))}\n          </Box>\n        )}\n      </Button>\n    </Grid>\n  );\n\n  return (\n    <>\n      <Card sx={{ mb: 2 }}>\n        <CardHeader\n          avatar={<AutoAwesomeIcon />}\n          title=\"Filter Presets\"\n          subheader=\"Quick filters for common use cases\"\n          action={\n            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n              {hasActiveFilters && onSaveCustomPreset && (\n                <Tooltip title=\"Save current filters as preset\">\n                  <Button\n                    size=\"small\"\n                    startIcon={<AddIcon />}\n                    onClick={handleSaveCurrentFilters}\n                    variant=\"outlined\"\n                  >\n                    Save\n                  </Button>\n                </Tooltip>\n              )}\n              <IconButton\n                onClick={() => setExpanded(!isExpanded)}\n                aria-label={isExpanded ? 'Collapse presets' : 'Expand presets'}\n              >\n                {isExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n              </IconButton>\n            </Box>\n          }\n        />\n        \n        <Collapse in={isExpanded}>\n          <CardContent sx={{ pt: 0 }}>\n            {/* Custom Presets */}\n            {customPresets.length > 0 && (\n              <>\n                <Typography variant=\"subtitle2\" sx={{ mb: 2, fontWeight: 600 }}>\n                  Your Custom Presets\n                </Typography>\n                <Grid container spacing={2} sx={{ mb: 3 }}>\n                  {customPresets.map(renderPresetButton)}\n                </Grid>\n              </>\n            )}\n            \n            {/* Default Presets */}\n            <Typography variant=\"subtitle2\" sx={{ mb: 2, fontWeight: 600 }}>\n              Built-in Presets\n            </Typography>\n            <Grid container spacing={2}>\n              {defaultPresets.map(renderPresetButton)}\n            </Grid>\n          </CardContent>\n        </Collapse>\n      </Card>\n\n      {/* Save Preset Dialog */}\n      <Dialog \n        open={saveDialogOpen} \n        onClose={() => setSaveDialogOpen(false)}\n        maxWidth=\"sm\"\n        fullWidth\n      >\n        <DialogTitle>Save Filter Preset</DialogTitle>\n        <DialogContent>\n          <TextField\n            autoFocus\n            margin=\"normal\"\n            label=\"Preset Name\"\n            fullWidth\n            variant=\"outlined\"\n            value={presetName}\n            onChange={(e) => setPresetName(e.target.value)}\n            placeholder=\"e.g., My Favorite Tools\"\n          />\n          <TextField\n            margin=\"normal\"\n            label=\"Description (optional)\"\n            fullWidth\n            variant=\"outlined\"\n            multiline\n            rows={2}\n            value={presetDescription}\n            onChange={(e) => setPresetDescription(e.target.value)}\n            placeholder=\"Brief description of this filter preset\"\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setSaveDialogOpen(false)}>Cancel</Button>\n          <Button \n            onClick={handleSavePreset} \n            variant=\"contained\"\n            disabled={!presetName.trim()}\n          >\n            Save Preset\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </>\n  );\n};\n\nexport default FilterPresets;"