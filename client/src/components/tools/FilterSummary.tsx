import React, { useMemo } from 'react';
import {
  Box,
  Typography,
  Chip,
  Button,
  Paper,
  Stack,
  IconButton,
  Tooltip,
  Divider,
} from '@mui/material';
import {\n  Clear as ClearIcon,\n  ClearAll as ClearAllIcon,\n  Category as CategoryIcon,\n  Label as LabelIcon,\n  Schedule as ScheduleIcon,\n  Input as InputIcon,\n  Output as OutputIcon,\n  Psychology as ComplexityIcon,\n  Flag as StatusIcon,\n} from '@mui/icons-material';\nimport type { FilterOptions } from '../../utils/searchUtils';\n\nexport interface ActiveFilter {\n  key: string;\n  type: 'category' | 'tag' | 'complexity' | 'lastUpdated' | 'inputType' | 'outputType' | 'status';\n  label: string;\n  value: string;\n  icon: React.ReactNode;\n}\n\nexport interface FilterSummaryProps {\n  filters: FilterOptions;\n  onClearFilter: (filterKey: string, value?: string) => void;\n  onClearAll: () => void;\n  resultCount: number;\n  totalCount: number;\n  compact?: boolean;\n}\n\nfunction getFilterIcon(type: ActiveFilter['type']): React.ReactNode {\n  switch (type) {\n    case 'category':\n      return <CategoryIcon />;\n    case 'tag':\n      return <LabelIcon />;\n    case 'complexity':\n      return <ComplexityIcon />;\n    case 'lastUpdated':\n      return <ScheduleIcon />;\n    case 'inputType':\n      return <InputIcon />;\n    case 'outputType':\n      return <OutputIcon />;\n    case 'status':\n      return <StatusIcon />;\n    default:\n      return <LabelIcon />;\n  }\n}\n\nfunction getFilterColor(type: ActiveFilter['type']): 'primary' | 'secondary' | 'success' | 'warning' | 'info' {\n  switch (type) {\n    case 'category':\n      return 'primary';\n    case 'tag':\n      return 'info';\n    case 'complexity':\n      return 'warning';\n    case 'lastUpdated':\n      return 'success';\n    case 'inputType':\n    case 'outputType':\n      return 'secondary';\n    case 'status':\n      return 'warning';\n    default:\n      return 'primary';\n  }\n}\n\nexport const FilterSummary: React.FC<FilterSummaryProps> = ({\n  filters,\n  onClearFilter,\n  onClearAll,\n  resultCount,\n  totalCount,\n  compact = false,\n}) => {\n  const activeFilters = useMemo((): ActiveFilter[] => {\n    const filterList: ActiveFilter[] = [];\n\n    // Categories\n    filters.categories.forEach(category => {\n      filterList.push({\n        key: `category-${category}`,\n        type: 'category',\n        label: `Category: ${category}`,\n        value: category,\n        icon: getFilterIcon('category'),\n      });\n    });\n\n    // Tags\n    filters.tags.forEach(tag => {\n      filterList.push({\n        key: `tag-${tag}`,\n        type: 'tag',\n        label: `Tag: ${tag}`,\n        value: tag,\n        icon: getFilterIcon('tag'),\n      });\n    });\n\n    // Complexity\n    if (filters.complexity) {\n      filterList.push({\n        key: 'complexity',\n        type: 'complexity',\n        label: `Complexity: ${filters.complexity}`,\n        value: filters.complexity,\n        icon: getFilterIcon('complexity'),\n      });\n    }\n\n    // Last Updated\n    if (filters.lastUpdated) {\n      const labels = {\n        week: 'Past week',\n        month: 'Past month',\n        year: 'Past year',\n      };\n      filterList.push({\n        key: 'lastUpdated',\n        type: 'lastUpdated',\n        label: `Updated: ${labels[filters.lastUpdated]}`,\n        value: filters.lastUpdated,\n        icon: getFilterIcon('lastUpdated'),\n      });\n    }\n\n    // Input Types\n    filters.inputTypes.forEach(inputType => {\n      filterList.push({\n        key: `inputType-${inputType}`,\n        type: 'inputType',\n        label: `Input: ${inputType}`,\n        value: inputType,\n        icon: getFilterIcon('inputType'),\n      });\n    });\n\n    // Output Types\n    filters.outputTypes.forEach(outputType => {\n      filterList.push({\n        key: `outputType-${outputType}`,\n        type: 'outputType',\n        label: `Output: ${outputType}`,\n        value: outputType,\n        icon: getFilterIcon('outputType'),\n      });\n    });\n\n    // Status\n    if (filters.status) {\n      filterList.push({\n        key: 'status',\n        type: 'status',\n        label: `Status: ${filters.status}`,\n        value: filters.status,\n        icon: getFilterIcon('status'),\n      });\n    }\n\n    return filterList;\n  }, [filters]);\n\n  const handleFilterRemove = (filter: ActiveFilter) => {\n    switch (filter.type) {\n      case 'category':\n      case 'tag':\n      case 'inputType':\n      case 'outputType':\n        onClearFilter(filter.key, filter.value);\n        break;\n      default:\n        onClearFilter(filter.key);\n        break;\n    }\n  };\n\n  if (activeFilters.length === 0) {\n    return (\n      <Box sx={{ mb: 2 }}>\n        <Typography \n          variant={compact ? 'body2' : 'body1'} \n          color=\"text.secondary\"\n          role=\"status\"\n          aria-live=\"polite\"\n        >\n          Showing all {totalCount.toLocaleString()} tools\n        </Typography>\n      </Box>\n    );\n  }\n\n  const resultText = `${resultCount.toLocaleString()} of ${totalCount.toLocaleString()} tools`;\n\n  if (compact) {\n    return (\n      <Box sx={{ mb: 2 }}>\n        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            {resultText} â€¢ {activeFilters.length} filter{activeFilters.length !== 1 ? 's' : ''}\n          </Typography>\n          <Button\n            size=\"small\"\n            onClick={onClearAll}\n            startIcon={<ClearAllIcon />}\n            sx={{ ml: 'auto' }}\n          >\n            Clear all\n          </Button>\n        </Box>\n      </Box>\n    );\n  }\n\n  return (\n    <Paper \n      sx={{ \n        p: 2, \n        mb: 2, \n        backgroundColor: 'action.hover',\n        border: '1px solid',\n        borderColor: 'divider',\n      }}\n      elevation={0}\n    >\n      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n        <Typography \n          variant=\"subtitle2\" \n          color=\"text.primary\"\n          role=\"status\"\n          aria-live=\"polite\"\n          sx={{ fontWeight: 600 }}\n        >\n          Showing {resultText}\n        </Typography>\n        <Tooltip title=\"Clear all filters\">\n          <Button\n            size=\"small\"\n            onClick={onClearAll}\n            startIcon={<ClearAllIcon />}\n            variant=\"outlined\"\n            color=\"secondary\"\n          >\n            Clear all\n          </Button>\n        </Tooltip>\n      </Box>\n\n      <Divider sx={{ mb: 2 }} />\n\n      <Box>\n        <Typography variant=\"caption\" color=\"text.secondary\" sx={{ mb: 1, display: 'block' }}>\n          Active filters ({activeFilters.length}):\n        </Typography>\n        <Stack direction=\"row\" spacing={1} sx={{ flexWrap: 'wrap', gap: 1 }}>\n          {activeFilters.map(filter => (\n            <Chip\n              key={filter.key}\n              label={filter.label}\n              onDelete={() => handleFilterRemove(filter)}\n              deleteIcon={\n                <Tooltip title={`Remove ${filter.label} filter`}>\n                  <ClearIcon />\n                </Tooltip>\n              }\n              variant=\"filled\"\n              color={getFilterColor(filter.type)}\n              size=\"small\"\n              icon={filter.icon}\n              sx={{\n                '& .MuiChip-deleteIcon': {\n                  fontSize: '0.875rem',\n                },\n                '& .MuiChip-icon': {\n                  fontSize: '0.875rem',\n                },\n              }}\n            />\n          ))}\n        </Stack>\n      </Box>\n    </Paper>\n  );\n};\n\nexport default FilterSummary;"